name: 'graphql'

variables:
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: Use dotnet core SDK
      inputs:
        packageType: 'sdk'
        version: '3.1.x'

    - task: NodeTool@0
      displayName: "Install Node"
      inputs:
        versionSpec: "12.x"
        checkLatest: true
    
    - task: PowerShell@2
      displayName: build.ps1
      inputs:
        filePath: ./build.ps1
        arguments: -Output $(Build.StagingDirectory)
        errorActionPreference: 'continue'
        failOnStderr: false
        pwsh: true

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: VSTest
        searchFolder: '$(Build.StagingDirectory)'
        testResultsFiles: '**/*.trx' 
        mergeTestResults: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'BenchmarkDotNet.Artifacts' 
        artifactName: 'benchmarks' 

    - publish: $(Build.StagingDirectory)
      artifact: artifacts

- stage: Publish
  condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
  jobs:
  - deployment: Deploy
    displayName: Publish packages
    pool:
      vmImage: ubuntu-latest
    environment: 'NuGets'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - download: current
            artifact: artifacts

          - task: NuGetToolInstaller@1
            displayName: 'Use NuGet '

          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/artifacts/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet-TankaGraphQL'
              allowPackageConflicts: true
          
          - task: ExtractFiles@1
            displayName: 'Extract files '
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/artifacts/*.tgz'
              destinationFolder: '$(Pipeline.Workspace)/packages/'
            continueOnError: true

          - task: Npm@1
            enabled: true
            displayName: publish beta
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              command: 'custom'
              workingDir: '$(Pipeline.Workspace)/packages/package'
              customCommand: 'publish --tag beta'
              customEndpoint: 'NPM'

          - task: Npm@1
            enabled: true
            displayName: 'npm publish latest'
            condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
            inputs:
              command: 'custom'
              workingDir: '$(Pipeline.Workspace)/packages/package'
              customCommand: 'publish'
              customEndpoint: 'NPM'

  - deployment: ghpages
    displayName: Publish gh-pages
    pool:
      vmImage: ubuntu-latest
    environment: 'NuGets'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: artifacts
          - checkout: self
            persistCredentials: true
            clean: true
          - script: |
              git config user.email "$(git.email)"
              git config user.name "$(git.name)"
              git checkout --track origin/gh-pages
            displayName: Use gh-pages
          - script: |
              cp -rv $(Pipeline.Workspace)/artifacts/gh-pages/** $(Build.SourcesDirectory)/
            displayName: Update files
          - script: |
              cd $(Build.SourcesDirectory)
              git add --all
              git status
            displayName: Add changes
          - script: |
              cd $(Build.SourcesDirectory)
              echo "BuildNumber: $(Build.BuildNumber)"
              git commit -m "$(Build.BuildNumber)"
              git status
            displayName: Commit
          - script: |
              cd $(Build.SourcesDirectory)
              git push
              git status
            enabled: true
            displayName: Push
  


