using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

using Scriban;
using Scriban.Runtime;

namespace Tanka.GraphQL.Server.SourceGenerators.Templates;

internal class InterfaceTemplate
{
    private static readonly IReadOnlyList<string> DefaultUsings =
    [
        "using System;",
        "using System.Threading.Tasks;",
        "using Microsoft.Extensions.Options;",
        "using Tanka.GraphQL.TypeSystem;",
        "using Tanka.GraphQL.Server;",
        "using Tanka.GraphQL.Executable;",
        "using Tanka.GraphQL.ValueResolution;",
        "using Tanka.GraphQL.Fields;"
    ];

    private IEnumerable<string> _usings = [];

    public required IEnumerable<string> Usings
    {
        get => _usings;
        [MemberNotNull(nameof(_usings))]
        set =>
            _usings = DefaultUsings
                .Union(value)
                .Distinct()
                .OrderBy(u => u)
                .ToList();
    }

    public required string Namespace { get; set; } = string.Empty;

    public required string Name { get; set; } = string.Empty;

    public required string? TypeName { get; set; }

    public required IEnumerable<ObjectPropertyDefinition> Properties { get; set; } = [];

    public required IEnumerable<ObjectMethodDefinition> Methods { get; set; } = [];

    public required string NamedTypeExtension { get; set; }

    private static string FileTemplate =>
        """"
        /// <auto-generated/>
        #nullable enable

        {{~ for using in usings ~}}
        {{using}}
        {{~ end ~}}

        {{~ if !string.whitespace namespace ~}}
        namespace {{ namespace }};
        {{~ end ~}}

        public static class {{name}}ControllerExtensions
        {
            public static SourceGeneratedTypesBuilder Add{{name}}Controller(
                this SourceGeneratedTypesBuilder builder)
            {
                builder.Builder.Configure(options => options.Builder.Add(
                    """
                    interface {{ type_name }}
                    {
                        {{~ for property in properties ~}}
                        {{ property.as_field }}
                        {{~ end ~}}
                        {{~ for method in methods ~}}
                        {{ method.as_field }}
                        {{~ end ~}}
                    }
                    """));
        
                return builder;
            }
        }

        {{ if named_type_extension -}}
        {{ named_type_extension }}
        {{- end }}
        #nullable restore
        """";

    public string Render()
    {
        Template? template = Template.Parse(FileTemplate);
        var scriptObject = new ScriptObject();
        scriptObject.Import(this);
        var templateContext = new TemplateContext();
        templateContext.PushGlobal(scriptObject);
        
        string? content = template.Render(templateContext);
        return content;
    }
}